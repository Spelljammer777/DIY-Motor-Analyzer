/*
 * Copyright (c) 2010, Oracle. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Oracle nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

package Packages;
import java.awt.Color;
import java.awt.Graphics2D;
//DIY Wind Turbine Analyzer - computes expected wind power electrical output based on a host of
//inputs
//    Copyright (C) 2015  Richard Lewis
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see http://www.gnu.org/licenses/.



public class MotorAnalyzer extends javax.swing.JFrame {
 
      double BladeSize = 84;
      double BladeMajor;
      double BladeRemainder; 
      int GearRatio;
      int BladeTSR;
      int BladeEff;
      String BatteryBank;
      int WireLength;
      int WireGauge;
      double MotorVolts;
      double MotorAmps;
      double MotorRPM;
      int MotorEff;
      String TempTxt;
      int OutWidth;
      int OutHeight;
      double TempMath;
      int PowerGraphMax;
      double Battery;
      int ex = 55;
      int ey = 100;


    /**
     * Creates new form ContactEditor
     */
    public MotorAnalyzer() {
      initComponents();

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jSlider1 = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        GearRatioField = new javax.swing.JFormattedTextField();
        BladeTSRField = new javax.swing.JFormattedTextField();
        BladeEffField = new javax.swing.JFormattedTextField();
        jLabel16 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        MotorRPMField = new javax.swing.JFormattedTextField();
        MotorEffField = new javax.swing.JFormattedTextField();
        MotorAmpsField = new javax.swing.JFormattedTextField();
        MotorVoltsField = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        Compute = new javax.swing.JButton();
        panelout = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        BatteryBankField = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        WireLengthField = new javax.swing.JFormattedTextField();
        WireGaugeField = new javax.swing.JFormattedTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        SummerOutField = new javax.swing.JFormattedTextField();
        jLabel19 = new javax.swing.JLabel();
        SummerAmpsField = new javax.swing.JFormattedTextField();
        jLabel20 = new javax.swing.JLabel();
        WinterOutField = new javax.swing.JFormattedTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        WinterAmpsField = new javax.swing.JFormattedTextField();
        jLabel23 = new javax.swing.JLabel();
        VoltageDropField = new javax.swing.JFormattedTextField();
        jLabel24 = new javax.swing.JLabel();
        MPHSummer = new javax.swing.JFormattedTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        MPHWinter = new javax.swing.JFormattedTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();

        jLabel12.setText("jLabel12");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DIY Wind Turbine Analyzer");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Wind Turbine Blades", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(100, 100, 150))); // NOI18N

        jLabel3.setText("Blade Diameter");

        jTextField1.setEditable(false);
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField1.setText("7");
        jTextField1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jSlider1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jSlider1.setForeground(new java.awt.Color(20, 20, 24));
        jSlider1.setMajorTickSpacing(12);
        jSlider1.setMaximum(144);
        jSlider1.setMinimum(24);
        jSlider1.setMinorTickSpacing(12);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setToolTipText("Diameter of blades in inches. Drag this to update graph in real time.");
        jSlider1.setValue(84);
        jSlider1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel7.setText("Feet   ");

        jTextField5.setEditable(false);
        jTextField5.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField5.setText("0");
        jTextField5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jLabel8.setText("inches");

        jLabel9.setText("Blade TSR");

        jLabel10.setText("Gear Ratiio");

        jLabel14.setText("Efficiency");

        GearRatioField.setColumns(2);
        try {
            GearRatioField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        GearRatioField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        GearRatioField.setText("1");
        GearRatioField.setToolTipText("This number represents the ratio of motor speed to blade speed. If the blades directly spin the motor, this number should be 1.");

        BladeTSRField.setColumns(2);
        try {
            BladeTSRField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        BladeTSRField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        BladeTSRField.setText("6");
        BladeTSRField.setToolTipText("Tip Speed Ratio. Typically about 4 to 6 for a blade set that produces lift. About 1 for flat blades.");

        BladeEffField.setColumns(2);
        try {
            BladeEffField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        BladeEffField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        BladeEffField.setText("35");
        BladeEffField.setToolTipText("Most horizontal axis wind turbine blades are about 35%. Valid inputs are between 1 and 59%.");

        jLabel16.setText("%");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jSlider1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 270, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel3)
                        .add(12, 12, 12)
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextField5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel9)
                    .add(jLabel10)
                    .add(jLabel14))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(BladeTSRField)
                    .add(BladeEffField)
                    .add(GearRatioField))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel16)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(2, 2, 2)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel8)
                            .add(jTextField5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel7)
                            .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jSlider1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel10)
                            .add(GearRatioField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel9)
                            .add(BladeTSRField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel14)
                            .add(BladeEffField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel16))
                        .add(0, 0, Short.MAX_VALUE))))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Permanent Magnet Motor Specifications", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(100, 100, 150))); // NOI18N

        jLabel4.setText("Volts");

        jLabel5.setText("Amps");

        jLabel6.setText("RPMs");

        jLabel2.setText("Efficiency");

        MotorRPMField.setColumns(4);
        MotorRPMField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        MotorRPMField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        MotorRPMField.setText("1750");
        MotorRPMField.setToolTipText("The motors rpm rating. This is usually printed on the side of the motor.");

        MotorEffField.setColumns(2);
        try {
            MotorEffField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        MotorEffField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        MotorEffField.setText("50");
        MotorEffField.setToolTipText("Efficiency of the DC Motor. Typically about 50%. A 3-phase alternator could be up to 90% efficient.");

        MotorAmpsField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0.#"))));
        MotorAmpsField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        MotorAmpsField.setText("17.5");
        MotorAmpsField.setToolTipText("Maximum amp rating of the motor. If the amp rating isn't known, you can take the HP rating times 1000 and divide by the motor's voltage rating.");

        MotorVoltsField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        MotorVoltsField.setText("120");
        MotorVoltsField.setToolTipText("The motors voltage rating at max RPM.");

        jLabel15.setText("%");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(MotorVoltsField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(MotorAmpsField)
                .add(18, 18, 18)
                .add(jLabel6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(MotorRPMField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(29, 29, 29)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(MotorEffField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel15)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jLabel5)
                    .add(jLabel6)
                    .add(jLabel2)
                    .add(MotorRPMField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(MotorEffField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(MotorAmpsField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(MotorVoltsField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel15))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Compute.setBackground(new java.awt.Color(170, 240, 170));
        Compute.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Compute.setText("COMPUTE");
        Compute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ComputeMouseClicked(evt);
            }
        });
        Compute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComputeActionPerformed(evt);
            }
        });

        panelout.setBackground(new java.awt.Color(250, 250, 250));
        panelout.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        org.jdesktop.layout.GroupLayout paneloutLayout = new org.jdesktop.layout.GroupLayout(panelout);
        panelout.setLayout(paneloutLayout);
        paneloutLayout.setHorizontalGroup(
            paneloutLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, paneloutLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(23, 23, 23))
        );
        paneloutLayout.setVerticalGroup(
            paneloutLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, paneloutLayout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .add(jLabel28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(24, 24, 24))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Battey Bank", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(100, 100, 150))); // NOI18N

        jLabel1.setText("Battery Bank");

        BatteryBankField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "12 volt", "24 volt", "36 volt", "48 volt", "96 volt", "120 volt-AC", "240 volt-AC" }));

        jLabel11.setText("Wire Length");

        jLabel13.setText("Wire Gauge");

        WireLengthField.setColumns(3);
        WireLengthField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        WireLengthField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        WireLengthField.setText("50");
        WireLengthField.setToolTipText("This is the wire length in feet from the battery to the windmill. From 1 to 99 feet is valid");

        WireGaugeField.setColumns(2);
        WireGaugeField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0"))));
        WireGaugeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        WireGaugeField.setText("10");
        WireGaugeField.setToolTipText("Standard AWG wire gauge. Smaller numbers means a thicker wire that can carry more current.");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(BatteryBankField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel11)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(WireLengthField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel13)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(WireGaugeField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(5, 5, 5)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(BatteryBankField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel13)
                    .add(WireLengthField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(WireGaugeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel17.setText("Max Power (Summer):");

        jLabel18.setText("Max Power (Winter):");

        jLabel19.setText("Watts @");

        try {
            SummerAmpsField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel20.setText("Amps @");

        jLabel21.setText("Watts @");

        jLabel22.setText("Amps @");

        try {
            WinterAmpsField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel23.setText("Voltage Drop:");

        try {
            VoltageDropField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        VoltageDropField.setToolTipText("This is the percent voltage drop at full current as measured at the batteries while charging. This is controlled by Wire Length and Wire Gauge. Shorter and thicker wires means lower voltage drop.");

        jLabel24.setText("%");

        try {
            MPHSummer.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        MPHSummer.setToolTipText("");

        jLabel25.setText("MPH");

        jLabel26.setText("MPH");

        try {
            MPHWinter.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel27.setText("at Max current (Summer)");

        jLabel29.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel29.setText("©2015, Richard Lewis, Version 1.70");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelout, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(layout.createSequentialGroup()
                                    .add(jLabel17)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(SummerOutField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(layout.createSequentialGroup()
                                    .add(jLabel18)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(WinterOutField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(layout.createSequentialGroup()
                                    .add(jLabel23)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(VoltageDropField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(jLabel24)))
                            .add(jLabel27))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(Compute, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel21)
                                        .add(12, 12, 12)
                                        .add(WinterAmpsField))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel19)
                                        .add(12, 12, 12)
                                        .add(SummerAmpsField)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel20)
                                    .add(jLabel22))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(MPHSummer, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                                    .add(MPHWinter))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel25)
                                    .add(jLabel26))
                                .add(13, 13, 13))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jLabel29)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(5, 5, 5)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel17)
                    .add(SummerOutField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel19)
                    .add(SummerAmpsField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel20)
                    .add(MPHSummer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel25))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel18)
                    .add(WinterOutField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel21)
                    .add(jLabel22)
                    .add(WinterAmpsField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(MPHWinter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel26))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(22, 22, 22)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel23)
                            .add(VoltageDropField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel24))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel27))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(Compute, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel29, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
      BladeSize = jSlider1.getValue();
      BladeMajor = (int)(BladeSize / 12); 
      BladeRemainder = (BladeSize - (BladeMajor * 12));      
      jTextField1.setText(String.valueOf((int)BladeMajor));
      jTextField5.setText(String.valueOf((int)BladeRemainder));
      ComputeAll();
         
      
    }//GEN-LAST:event_jSlider1StateChanged
    private void ComputeAll() {
           // COMPUTE button function
      TempTxt = GearRatioField.getText();
      GearRatio = Integer.parseInt(TempTxt);
      BladeSize = jSlider1.getValue();
      TempTxt = BladeTSRField.getText();
      BladeTSR = Integer.parseInt(TempTxt);
      TempTxt = BladeEffField.getText();
      BladeEff = Integer.parseInt(TempTxt);
      BatteryBank = (String) BatteryBankField.getSelectedItem();
      TempTxt = WireGaugeField.getText();
      WireGauge = Integer.parseInt(TempTxt);
      TempTxt = WireLengthField.getText();
      WireLength = Integer.parseInt(TempTxt);
      TempTxt = MotorVoltsField.getText();
      MotorVolts = Integer.parseInt(TempTxt);
      TempTxt = MotorAmpsField.getText();
      MotorAmps = Double.parseDouble(TempTxt);
      MotorAmps = Math.round(MotorAmps * 10) / 10f;
      //MotorAmps = Integer.parseInt(TempTxt);
      TempTxt = MotorRPMField.getText();
      MotorRPM = Integer.parseInt(TempTxt);
      TempTxt = MotorEffField.getText();
      MotorEff = Integer.parseInt(TempTxt);
      OutWidth = panelout.getWidth();
      OutHeight = panelout.getHeight();
      int j = 0;
     
      
      // ********** Get the Battery Bank voltage ***********
      
      BatteryBank = String.valueOf(BatteryBankField.getSelectedItem());
      if (BatteryBank.equals("12 volt")){
          Battery = 13.4;
      }
      if (BatteryBank.equals("24 volt")){
          Battery = 26.8;
      }
      if (BatteryBank.equals("36 volt")){
          Battery = 40.2;
      }
      if (BatteryBank.equals("48 volt")){
          Battery = 53.6;
      }
      if (BatteryBank.equals("96 volt")){
          Battery = 107.2;
      }
      if (BatteryBank.equals("120 volt-AC")){
          Battery = 120.0;
      }
      if (BatteryBank.equals("240 volt-AC")){
          Battery = 240.0;
      }
      
  
          
           
      
      /*
      Draw the output grid - starts here    
      */
      Graphics2D gfx = (Graphics2D)panelout.getGraphics();
      
      //ImageIcon iconLogo = new ImageIcon("Images/windmill.png");
      //jLabel28.setIcon(iconLogo);
      
      
      // **************** Compute Voltage Drop section *************************
        String OhmsString;
        switch (WireGauge) {
            case 1:  OhmsString = "0.1239";
                     break;
            case 2:  OhmsString = "0.1563";
                     break;
            case 3:  OhmsString = "0.197";
                     break;
            case 4:  OhmsString = "0.2485";
                     break;
            case 5:  OhmsString = "0.3133";
                     break;
            case 6:  OhmsString = "0.3951";
                     break;
            case 7:  OhmsString = "0.4982";
                     break;
            case 8:  OhmsString = "0.6282";
                     break;
            case 9:  OhmsString = "0.7921";
                     break;
            case 10: OhmsString = "0.9989";
                     break;
            case 11: OhmsString = "1.26";
                     break;
            case 12: OhmsString = "1.588";
                     break;
            case 13: OhmsString = "2.003";
                     break;
            case 14: OhmsString = "2.525";
                     break;
            case 15: OhmsString = "3.184";
                     break;
            case 16: OhmsString = "4.016";
                     break;
            case 17: OhmsString = "5.064";
                     break;
            case 18: OhmsString = "6.385";
                     break;
            default: OhmsString = "1.588";
                     break;          
        }
        
        double Vdrop = MotorAmps * 2 * ((2 * WireLength * Double.parseDouble(OhmsString))/1000) ;
         Vdrop = (Vdrop / (Battery * 1.085)) * 100;
         VoltageDropField.setText(String.valueOf(Vdrop));
        
        //gfx.drawString(Vdrop, 250, 150);
        //gfx.drawString(String.valueOf(Vdrop), 250, 150);
        if (Vdrop < 10){
            VoltageDropField.setText("0" + String.valueOf(Vdrop));
        }
        if (Vdrop > 60){
            VoltageDropField.setForeground(Color.white);
            VoltageDropField.setBackground(Color.red);
            VoltageDropField.setText("00.0");
            gfx.setColor(Color.RED);
              gfx.fillRect(1, 1, OutWidth, OutHeight);
              gfx.setColor(Color.WHITE);
              gfx.drawString("Voltage Drop is too high.", ex, ey);
              gfx.drawString("Use shorter wire or use thicker wire (lower gauge #).", ex, ey + 20);
              gfx.setColor(Color.black);
        }
        else {
            VoltageDropField.setForeground(Color.black);
            VoltageDropField.setBackground(Color.white);
            
        }
      
      

      // ******** draw horizontal lines and wind speed ************
      gfx.setBackground(Color.white);
      gfx.clearRect(0, 0, OutWidth, OutHeight);
      
      for(int i=((OutHeight-15)); i>(4); i=i - ((OutHeight-20)/6)){
          gfx.setColor(Color.BLACK);
          gfx.drawString(String.valueOf(j), 1, i);
          gfx.setColor(Color.LIGHT_GRAY);
          gfx.drawLine(20, i-4, OutWidth, i-4);
          j = j + 5;          
      }
      
      // *********** StartChargeWindSpeed calculations *************************     
          double VoltPerRev = MotorVolts / MotorRPM;
          double StartChargeRPM = Battery/ VoltPerRev;
          TempMath = (StartChargeRPM * (BladeSize/12)) / (BladeTSR * GearRatio * 28);
          double StartChargeWindSpeed = Math.round(TempMath * 10) / 10f;
          double s = StartChargeWindSpeed;
      
      
      // draw vertical lines and power
          gfx.setColor(Color.LIGHT_GRAY);
          gfx.drawLine(20, OutHeight-20, 20, 0);
          gfx.drawLine((OutWidth-100)/2, OutHeight-20, (OutWidth-100)/2, 0);
          gfx.drawLine((OutWidth-15), OutHeight-20, (OutWidth-15), 0);
          gfx.setColor(Color.BLACK);
          gfx.drawString(("0"), 17,OutHeight-4 );
         // radius^2 in feet and velocity in mph (set to 30)
          double r = BladeSize / 24;
          r = r * r;
          double v = Math.pow(30, 3);
          double eff = BladeEff * MotorEff * 0.0001;
          
          //TempMath = ((r * v * 0.00477) / 0.35) * eff; this version worked..i changed it below
          // by adding Vdrop to the mix.
          TempMath = (((r * v * 0.00477) / 0.35) * eff);
          TempMath = TempMath - (TempMath * Vdrop * 0.01);
          PowerGraphMax = (int)TempMath;
          gfx.drawString(String.valueOf(PowerGraphMax/2), ((OutWidth-100)/2)-9, OutHeight-4);
          gfx.drawString(String.valueOf(PowerGraphMax), OutWidth-29, OutHeight-4);
                   
          //************ DRAW GRAPH CURVE******************        
          gfx.setColor(Color.blue);
          gfx.drawArc(21, 5, OutWidth *2 , (OutHeight - 20 - (((OutHeight-20)/30) * (int)StartChargeWindSpeed) *2) +180 , 180, -90);
          gfx.drawArc(20, 5, OutWidth *2 , (OutHeight - 20 - (((OutHeight-20)/30) * (int)StartChargeWindSpeed) *2) +180 , 180, -90);
          gfx.drawArc(20, 6, OutWidth *2 , (OutHeight - 20 - (((OutHeight-20)/30) * (int)StartChargeWindSpeed) *2) +180 , 180, -90);
          j = (OutHeight - 20 - (((OutHeight-20)/30) * (int)StartChargeWindSpeed))+3;
          String st = String.valueOf(StartChargeWindSpeed); 
          st = st.substring(0, 3);
          gfx.drawString(st, 28, j);
          gfx.drawString("MPH (Starts Charging)", 48, j);
          gfx.drawString("Power in Watts", 235, OutHeight -4);
          gfx.rotate(Math.toRadians(-90));
          gfx.drawString("MPH", -65, 33);
          gfx.rotate(Math.toRadians(90));

                  //String cutString = aString.substring(0, 4); sample
          
          
          //************Compute Max Power and Amps************************
          // use Battery * 1.085v for 12v battery = 14.5V, 29v for 24v bank, 45v for 36, etc.
          double MaxSummerPower = MotorAmps * 2 * (Battery*1.085);
          double MaxWinterPower = MotorAmps * 3 * (Battery*1.085);
          SummerOutField.setText(String.valueOf((int)MaxSummerPower));
          //double sa = ((int)(MotorAmps * 10));
          //sa = sa/10;
          
          if (MotorAmps < 5){
            SummerAmpsField.setText("0" + String.valueOf(MotorAmps * 2));
        }else{
            SummerAmpsField.setText(String.valueOf(MotorAmps * 2));
          }
          
          if (MotorAmps < 3.3333){
            WinterAmpsField.setText("0" + String.valueOf(MotorAmps * 3));
        }else{
            WinterAmpsField.setText(String.valueOf(MotorAmps * 3));
          }
          
          //String wa = (String.valueOf(MotorAmps * 3));
          
          WinterOutField.setText(String.valueOf((int)MaxWinterPower));
          //WinterAmpsField.setText(String.valueOf(MotorAmps * 3));
          if (MaxSummerPower < PowerGraphMax){
              SummerOutField.setForeground(Color.white);
              SummerOutField.setBackground(Color.red);
          }
          else {
              SummerOutField.setForeground(Color.black);
              SummerOutField.setBackground(Color.white);
          }
          
          //TempMath = Math.pow((MaxSummerPower * .35)/(0.00477 * r *eff), 0.333);
          TempMath = 30 *(1/(Math.pow(PowerGraphMax/MaxSummerPower, 0.333)));
          //TempMath = TempMath * (1 + (Vdrop * 0.01));
          if (TempMath > 99.9){
              MPHSummer.setForeground(Color.white);
              MPHSummer.setBackground(Color.red);
              MPHSummer.setText("00.0");
          }
          else {
              MPHSummer.setForeground(Color.black);
              MPHSummer.setBackground(Color.white);
              MPHSummer.setText(String.valueOf(TempMath));
          }
          //MPHSummer.setText(String.valueOf(TempMath));
          if (MaxWinterPower < PowerGraphMax){
              WinterOutField.setForeground(Color.white);
              WinterOutField.setBackground(Color.red);
          }
          else {
              WinterOutField.setForeground(Color.black);
              WinterOutField.setBackground(Color.white);
          }
          //TempMath = Math.pow((MaxWinterPower * .35 )/(0.00477 * r *eff), 0.333);
          //TempMath = TempMath * (1 + (Vdrop * 0.01));
          TempMath = 30 *(1/(Math.pow(PowerGraphMax/MaxWinterPower, 0.333)));
          
          if (TempMath > 99.9){
              MPHWinter.setForeground(Color.white);
              MPHWinter.setBackground(Color.red);
              MPHWinter.setText("00.0");
          }
          else {
              MPHWinter.setForeground(Color.black);
              MPHWinter.setBackground(Color.white);
              MPHWinter.setText(String.valueOf(TempMath));
          }
          
          //******************** error catching ********************************        
          if (StartChargeWindSpeed >10 || MaxSummerPower < (PowerGraphMax/2)){
              gfx.setColor(Color.RED);
              gfx.fillRect(1, 1, OutWidth, OutHeight);
              gfx.setColor(Color.WHITE);
              gfx.drawString("Blade diameter is too large for this motor.", ex, ey);
              gfx.drawString("Use a smaller diameter blade or use a more powerful motor.", ex, ey + 20);
              gfx.setColor(Color.black);
          }
          
           if (StartChargeWindSpeed <3){
              gfx.setColor(Color.RED);
              gfx.fillRect(1, 1, OutWidth, OutHeight);
              gfx.setColor(Color.WHITE);
              gfx.drawString("Blade diameter is too small for this motor.", ex, ey);
              gfx.drawString("Use a larger diameter blade or use a less powerful motor.", ex, ey + 20);
              gfx.setColor(Color.black);
          }
           if (BladeEff <1 || BladeEff >59){
              gfx.setColor(Color.RED);
              gfx.fillRect(1, 1, OutWidth, OutHeight);
              gfx.setColor(Color.WHITE);
              gfx.drawString("Blade Efficiency value is out of bounds.", ex, ey);
              gfx.drawString("Use a value between 1 and 59.", ex, ey + 20);
              gfx.setColor(Color.black);
          }


    }
    private void ComputeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComputeMouseClicked
       
        
    }//GEN-LAST:event_ComputeMouseClicked

    private void ComputeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComputeActionPerformed
           ComputeAll();


        
           /*
          Good to know!!
    g2d.translate((float)x,(float)y);
    g2d.rotate(Math.toRadians(angle));
    g2d.drawString(text,0,0);
    g2d.rotate(-Math.toRadians(angle));
    g2d.translate(-(float)x,-(float)y);
          */
    }//GEN-LAST:event_ComputeActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx=0; idx<installedLookAndFeels.length; idx++)
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MotorAnalyzer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MotorAnalyzer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MotorAnalyzer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MotorAnalyzer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MotorAnalyzer().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox BatteryBankField;
    private javax.swing.JFormattedTextField BladeEffField;
    private javax.swing.JFormattedTextField BladeTSRField;
    private javax.swing.JButton Compute;
    private javax.swing.JFormattedTextField GearRatioField;
    private javax.swing.JFormattedTextField MPHSummer;
    private javax.swing.JFormattedTextField MPHWinter;
    private javax.swing.JFormattedTextField MotorAmpsField;
    private javax.swing.JFormattedTextField MotorEffField;
    private javax.swing.JFormattedTextField MotorRPMField;
    private javax.swing.JFormattedTextField MotorVoltsField;
    private javax.swing.JFormattedTextField SummerAmpsField;
    private javax.swing.JFormattedTextField SummerOutField;
    private javax.swing.JFormattedTextField VoltageDropField;
    private javax.swing.JFormattedTextField WinterAmpsField;
    private javax.swing.JFormattedTextField WinterOutField;
    private javax.swing.JFormattedTextField WireGaugeField;
    private javax.swing.JFormattedTextField WireLengthField;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JPanel panelout;
    // End of variables declaration//GEN-END:variables
    
}
